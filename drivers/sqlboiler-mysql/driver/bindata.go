// Code generated for package driver by go-bindata DO NOT EDIT. (@generated)
// sources:
// override/templates/17_upsert.go.tpl
// override/templates/singleton/mysql_upsert.go.tpl
// override/templates_test/singleton/mysql_main_test.go.tpl
// override/templates_test/singleton/mysql_suites_test.go.tpl
// override/templates_test/upsert.go.tpl
package driver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x73\xdb\xb8\x11\x7f\x96\x3e\xc5\x46\x93\xbb\x90\x37\x0a\x9d\xce\x74\xfa\xe0\x8e\x1f\xe2\x3f\xc9\xb9\xb1\x1d\xdb\x8a\xeb\x99\x7a\x3c\x19\x98\x5c\xc9\xa8\x21\x40\x01\x41\xdb\xaa\xca\xef\xde\xd9\x05\x28\x92\xb2\x24\x2b\x69\x7c\xd3\xde\xc3\x59\x04\x16\xbb\x8b\xdd\xdf\xfe\x43\x66\xb3\xb7\xf0\x5a\x28\x29\x72\xd8\xde\x81\xe4\x3d\xfd\xc2\x3c\xf9\x22\x6e\x14\x82\xff\x93\x9c\x88\x31\x96\x65\x97\x49\xf3\xf4\x16\xc7\xc2\x6f\xd3\x81\x9a\x02\xfe\x0d\xc9\xa0\xde\xe5\x03\x72\x08\xc9\xfb\x2c\xfb\xa8\xcc\x8d\x50\xf0\xb6\x2c\xbb\x5b\x5b\x70\x31\xc9\xd1\xba\x8f\x20\x9c\xc3\xf1\xc4\xe5\x20\x34\x48\x4d\x6b\x7d\x10\x3a\x83\xcc\x20\xaf\x15\x93\x4c\x38\x04\x63\x41\x8e\xb4\xb1\x08\x46\x43\x6a\xf4\x50\xc9\xd4\x25\xdd\x61\xa1\x53\x88\x0c\xfc\x36\x9b\x79\xfd\x93\x8b\xc9\x40\xea\x51\xa1\x84\x2d\xcb\xb8\x92\x12\xb1\x12\xda\x38\x48\x4e\xcc\x9e\xd1\x0e\x1f\x5d\x59\xa6\xee\x91\x58\xd1\x47\x12\x16\xfb\x30\x9b\xa1\xce\x48\xc9\x20\x79\xcf\xa8\x62\xac\xf3\x7e\x50\x2e\x7c\xc2\x8d\x91\x2a\x09\x1f\x31\xa0\xb5\xc6\xc2\xac\xdb\xb1\xe8\x0a\xab\xc1\x24\x5e\xb0\x97\xdb\x94\xc9\xe7\x3e\xa2\xdb\xdf\x8d\xe2\xd9\x0c\x55\x8e\xac\x47\x1f\xaa\x8d\x40\x19\xf6\x75\x56\x96\xfd\xb5\x9a\xc4\xdd\xb2\xdb\x9d\x2b\xdd\xf5\xe6\x26\x03\x36\x4c\x4e\x3f\x4f\x85\x96\xe9\x82\xf1\x4f\xff\x3b\xeb\x03\xf3\xcc\x69\x8d\x0d\xb0\xb1\x3b\x4e\x5f\xda\x1f\xb3\x6e\x47\x0e\x49\x29\x42\xe7\x1f\xe9\x8c\xbf\xb2\xd0\x57\x3b\xa0\xa5\x22\x2d\x3a\x13\x32\x51\xc4\xfc\x2e\xad\x98\x1c\x58\x1b\xa1\xb5\x71\xdc\xed\x94\xcb\x1c\xb7\xc2\x53\xcb\x1c\x05\x45\x2e\xf5\x88\xbe\xf1\x11\xd3\xc2\x19\xfb\x3d\x81\xd3\x60\x3d\xf9\x31\x2f\x9e\x3e\xb5\x27\x29\xe2\x6d\x77\x10\x54\x6a\x58\xf5\xa9\x6b\x6b\xf2\xb0\xd4\x38\xf5\xbc\xad\x37\x77\xf9\x12\x9c\x35\x71\x45\x6a\xbc\x9c\x5b\xef\x85\x85\xf1\x74\x70\x76\xb4\xd4\x98\x17\x5a\x7e\x2b\x2a\xa9\xb0\x03\x57\xd7\xb9\xb3\x52\x8f\x66\x9c\x67\xad\xd0\x23\x84\xd7\xb2\x0f\xaf\x53\xa3\x1a\x99\xb6\x3a\x40\x12\x3a\x44\x29\x87\x4c\x92\x78\x7e\xb4\xda\x9b\xcd\x78\xc5\xa7\xed\x5e\xdf\xd3\x55\x6a\x85\xdf\x25\x6b\x3b\xc7\xc2\x4b\xa0\x6c\x80\xd8\xf2\x14\x64\x26\x2d\xc6\xa8\x9d\x70\xd2\x68\x18\x1a\x0b\xb7\xe6\x01\x9c\x81\x89\x35\x13\xb4\x6a\x0a\x45\x8e\x6d\x77\xb0\xc4\x96\x47\x36\x05\xe9\xff\x16\x46\xe7\x65\x42\x0e\xc1\xc0\x4e\x0d\xa7\x50\x36\x78\x3f\x4f\x4e\xf0\x21\xea\xcd\x66\xc9\xe9\xdd\xc8\x7b\x6f\x1b\xb4\x81\xd9\xac\x55\x88\xc9\x5c\xf7\x32\xc3\x8c\x4d\x58\xf0\x6d\x7b\x8c\x3f\xef\x69\x72\xa4\x22\xd7\xf4\x9c\x1c\x63\xee\xc4\x78\xf2\xd5\x53\x7d\xbd\x45\x35\x41\xdb\x83\x04\x08\xa0\x1d\x42\x28\xc1\x9b\xa5\xcf\xf3\x50\x91\x49\x77\xa0\x49\x20\xa1\xa4\x83\xf7\xa8\xc9\x1c\x55\x7c\xe5\xe8\xbc\x85\x3f\xab\xec\xef\x42\x15\x98\x47\xa9\x7b\x8c\xe7\x41\xf8\x6a\xd9\xe5\x48\xbb\x46\x68\x74\x9a\xd1\xf9\xbb\x31\x77\x01\xd0\xcd\x38\xce\xcc\x2e\x0e\x8d\x45\x2f\x8c\x89\x36\x0e\xea\xa7\x61\xdb\x56\xa5\x53\x47\x41\xb7\xa3\xff\xb5\x8f\x43\x51\x28\xc7\x2d\xd0\xb7\x02\xad\xc4\x3c\x39\x31\xfa\x1f\x68\x4d\xd8\x1a\x20\x01\x2a\xc0\x6d\xdf\x3c\xe8\x1a\x70\xc1\xc7\x97\xd2\xdd\x06\xe2\x3e\x98\x98\xd8\xfa\x90\x7c\x86\xeb\x86\x19\x82\x79\xb2\x81\x14\xea\x68\xce\x3b\x26\x2c\xbd\x5b\x85\xa4\x54\x68\x32\x96\x77\x3e\x3c\x48\x77\x0b\x02\x1c\xf7\x6e\xee\x56\x38\x08\xfb\x55\xd4\x52\x04\x0b\x28\x98\x33\xa4\x2c\xb7\xc2\xd5\xd6\x16\xec\x16\x52\x65\x90\x8a\xf4\x16\xe1\x0e\xa7\x20\xf5\x5b\x25\x35\x42\x31\x52\x52\x4d\xe1\x2d\x8c\xa7\xf9\x37\x05\xf7\x39\x4c\xe8\xef\xc4\x9a\x1b\x85\xe3\xbc\xdb\xb9\x29\x86\x64\x82\xdc\xd9\xb1\xd0\x23\x85\x54\x5e\x77\x8b\xe1\x10\x6d\x14\xf3\x6e\x72\x69\xa5\xc3\x01\xa7\xbf\x28\x77\x36\x35\xfa\x3e\x39\x74\x46\x44\xad\x08\x4b\x3e\x49\x9d\x51\xa2\x25\xd8\x7f\xed\x43\x4a\x5c\x7d\xa2\x6c\xd3\xed\x19\x95\xb3\x49\x16\x79\xa7\x7c\x9b\x7a\x79\x77\xea\x30\x7a\x93\xbc\x79\x4e\x8d\x76\x02\x5a\xad\x46\x9b\xee\x47\xd4\x78\xca\xb3\x81\xce\x9f\xc0\xab\x82\xe4\x1a\x56\xe4\xdb\xed\x1d\xa0\xdd\xb0\x11\x77\x3b\xb5\xf3\x4e\x8b\xca\x79\x37\xc5\x30\xe6\x50\x5e\x1a\x16\x3e\x6c\xf7\x08\x2e\xc7\x85\x4b\xce\x8f\x4c\x7a\x47\x9c\x18\x40\x7d\x8f\xa3\x8c\x04\x3d\x7f\xfe\xea\x0e\xa7\xd7\x1b\x0b\xba\xd0\xca\x8b\xe2\x68\x79\x15\x04\xd1\x85\xab\x36\xd7\xa2\x23\xc1\x6d\x6f\x1d\x36\xbe\x28\x2e\xbb\x9d\xce\x2a\x89\xef\x95\xaa\xa2\x72\x0d\xd5\x92\xbc\xb0\x19\xb5\x29\x5c\xf3\x40\x0d\x00\xfa\x8c\xbb\x9d\x4e\xa8\xbc\xdb\x3b\x0b\xb8\xbf\x68\x7c\xfd\x94\x2b\x9c\x5a\x39\x16\x76\xfa\x09\xa7\x0d\x62\x32\x2c\x5b\xb6\x2d\xfc\x30\x3f\x31\x1a\xa3\x18\x7e\xfd\x95\x53\x94\xdf\x6d\xe4\xa7\xe7\x4b\x5d\xa1\x7d\x6a\x32\x55\xc6\x5a\x28\x7c\x7d\x48\x4d\xa1\x32\x2e\x00\x37\x9c\x8d\x82\x25\x7c\xae\x02\x25\x73\x2e\x84\x9c\xb1\x48\x1c\x34\xb3\xce\x80\x9a\xfa\xf1\x44\x21\xb5\x20\x91\x45\xd7\xaf\xe3\x81\x0e\x31\x50\x12\x4a\xd4\x53\xd8\xf1\xfc\x3d\xb4\xce\x68\xe9\x98\xd2\x74\x94\x49\xa1\x30\x75\x7d\xa0\x1e\x2b\x6f\x0e\xbb\xbd\xaa\x1d\xa8\xfa\x80\x9a\xa5\x45\xcf\x02\x76\x60\x38\x76\xc9\x60\x62\xa5\x76\x43\xf6\x4e\x6f\x70\x70\x74\xb0\xf7\x05\x7e\xc9\xe1\xc3\xf9\xe7\x63\xba\xf0\xd1\x59\x59\x2e\xdc\x7b\x36\x4b\xce\xcf\xca\x12\x2e\x7f\x3f\x38\x3f\x80\x5f\xf2\x1e\xfb\xcc\xb7\x8b\x79\xf2\x37\x23\x75\x54\x5f\xf3\x30\x43\xed\xce\x0a\xe3\x70\xa0\x64\x8a\x95\xca\xc9\xd1\x59\x1f\xaa\xdf\xe7\x67\x1c\x04\x71\x1f\x7a\xfd\x5e\x5c\x71\x0b\x0c\x2e\x6f\xd1\xe2\x9e\x12\x45\x8e\xec\x20\x52\xa8\xc7\x37\x66\x2d\x7a\x7d\x78\xd7\xb4\xdc\x1c\x12\xfe\xb2\xf7\xd4\x11\x1c\x8b\xc9\x44\xea\x91\x6f\x1a\xea\xe2\xb7\x2b\x75\x16\xb6\x56\x15\xd3\x2f\xd3\x09\xf6\x57\xa5\x84\x39\xdb\xda\xc2\x4f\x7b\x8e\x56\xa5\xa7\x7c\x56\xd5\x4c\xba\x30\x11\x06\x34\xce\x7d\xf3\xd2\xca\x92\x5c\x12\xb8\x44\xd5\xb6\xae\xac\x6c\xe9\xeb\x2d\x9b\x91\x13\x37\x0e\xd9\x65\x87\x3a\x93\x16\x53\x02\xae\x5f\xe0\xd6\xeb\xf3\x30\x32\x54\x8a\xee\x85\x6a\xb5\x19\xbe\x2f\xfb\x60\xcd\xb8\xba\x02\x33\x0c\x69\xb7\xe5\xa4\xd8\xb7\x81\x5e\x93\x1c\xae\xae\xa5\x76\x68\x87\x22\xc5\x59\x39\xef\x37\x16\x8d\xd5\x30\x64\x75\xb0\x16\x7e\xea\xec\x6a\xd1\x0d\x1e\x55\xc7\xda\x6a\xd3\xe7\x7d\x20\xf7\xcf\xfb\x78\x53\x8c\x8e\x4d\x86\x2c\x8a\xa2\xe7\x03\x47\x8f\xd2\x51\xbd\xcf\x35\xcc\x56\x02\x38\x80\xe3\xe7\xa9\xc9\x64\x71\xe8\x05\x69\x0a\x68\x0b\x3e\xcc\x99\x98\x3b\x5b\x96\xfd\xc0\xc7\xb8\x30\x2e\xb0\xa2\xab\x86\x0e\xb8\x2d\xf3\x61\x03\xbd\x1e\x96\x69\xd3\xe8\x92\x5f\xa7\x42\x1f\x89\xdc\xf9\xea\x74\xb8\xdf\x9c\x04\x17\x76\xc2\x44\xc8\xf3\xe0\xb2\xad\xe5\x96\xb6\x98\x73\xc7\x1a\xda\x6e\x6a\x9e\x79\x3c\x8a\x1a\x5a\x7b\xf5\x92\x24\x89\x99\x4b\x6d\xad\x55\x87\x83\x84\x88\x3b\xf3\x35\x8c\xc2\x45\x5b\x3c\x97\xab\xf9\xb5\x0a\xcf\xef\x53\xf0\xe9\xb1\xef\x57\xad\x1a\x14\xd6\xce\x37\x54\xd1\x2e\xad\x98\x44\x68\xad\xcf\x95\xeb\xea\x1a\x75\x66\x0b\x39\xbe\xd7\x0c\x87\xe5\x0e\xa4\x30\x55\xb4\xba\x0f\x52\xbb\xbf\xfc\xb9\xa5\x1c\x6d\xfa\xce\xfd\x58\x4c\xe0\xea\xba\x08\x24\xb4\x5e\x25\x6b\x6e\x48\xdb\x01\xbe\x26\xc2\xe7\x85\x7b\x64\x9c\x01\xee\xaf\xc2\xac\xf6\xac\xa6\x5e\xcb\xca\xf6\x1e\x25\x49\x83\x2c\x8b\xd6\x8d\x8b\x07\xd6\x0e\xa6\x3a\xfd\x20\xa4\xaa\x24\xbd\x4e\x8d\xe2\x37\x66\x6e\xdb\x32\x7c\xac\x82\xe0\xf4\x13\x4e\xe7\xef\x0b\xef\x6a\x97\x2d\xbc\x9a\xf0\x83\x1e\xf7\x08\x73\x4e\x2d\xd2\x2f\xd2\x29\xdf\x8d\x86\x5c\xbe\x40\x4d\xb4\x26\xf1\x7a\x78\xda\xb2\x04\x6e\x5d\x53\xa3\x12\xaa\x03\x65\x19\xf9\x5b\xfb\x9b\x05\x3f\x71\x96\x0c\x0d\xd1\x52\x0b\xff\x89\x76\x17\x77\xae\xde\x5d\xd3\xde\xfa\xc2\x72\xd5\xab\xcd\x52\x96\xbd\xeb\xd5\xae\x6a\x0d\xbb\x73\x8c\xbc\x58\xbd\x6b\x36\x55\x3f\x21\x64\x2c\x3a\x2b\xf1\x1e\xab\xb9\x94\xab\x49\xbe\x22\x84\x80\xae\xdb\x82\xfb\xba\x9a\xb8\x49\x6d\xed\xd7\x51\x15\xbf\x40\xb5\xaa\x7a\xc3\x0d\x0a\x56\xf3\x5a\x3e\x4f\xfd\x61\xb5\x6b\xa5\x96\x0f\xcf\xe8\xd6\x7e\xef\x59\xb4\x5b\x23\x35\x33\xfb\x73\xf3\x10\xb5\x05\x3e\xe5\x9c\x0c\x52\xc1\xbd\x1c\x35\x1d\x5e\x54\xd3\x06\x4b\x58\x2e\xc9\xf8\xdf\xcb\xbe\x2a\x06\x3f\x01\xce\x13\x33\x29\xf8\x71\x2e\xf3\x43\xdd\x7a\x3c\x53\xfa\x6b\x86\xf3\xf6\x93\x99\x76\xb3\xa1\xb8\x1a\xbe\x37\x20\xe7\x61\x1b\x76\xbc\xa5\x36\x16\x30\x1f\xba\x3b\xe5\x06\xef\x88\xad\x67\xc4\x13\x7c\x08\xcf\x88\x81\xa2\x99\x47\xd7\xbf\xe2\x79\x5e\x03\x71\x8f\xde\xbb\xfe\x3d\xff\x30\x8c\xf9\xcc\x6e\x03\x36\x2b\x5f\x23\xe7\xff\xa4\x97\x99\xf7\x43\x87\xf6\x87\x5e\x22\x43\xfa\x6d\xf4\x4c\xcc\x54\x53\x71\x6b\xbd\xc5\x3f\xf7\xac\xbd\xca\x60\xf0\xdb\x01\x5f\x14\x22\xff\xa3\xef\xd1\x48\xa1\x0f\x00\x10\x8c\x6a\xee\x28\xfe\x53\xf7\xe8\x93\x5b\xd4\x13\xe4\x9e\x5e\x9c\x44\xfe\x34\xd3\x12\xb6\xcc\x5d\x38\x48\xff\xd5\xca\xf6\xa9\x2c\x9f\x18\x76\xea\x00\x1d\x53\x94\xfc\xff\x22\x47\x4b\xc5\x7e\x51\xc2\x05\xaf\xc7\x49\xe4\x5b\x91\x18\xb6\xb6\x60\x2c\xa6\x70\x83\x20\xc0\x0f\xaf\x3f\x26\x94\xff\xa4\x85\xb5\xcd\x77\xe9\x0f\x52\x67\x0b\x86\xa3\xb1\xbc\x89\x0b\x93\x1c\xee\xb3\x16\xce\x64\x66\x1b\x46\xe8\xfc\x5b\xe8\x9b\xbc\xfd\xe6\x09\x5a\x8c\xb1\x52\xad\x85\x9c\x65\x1a\x12\x88\x82\x5e\x9d\xb1\xb0\xf9\xad\x50\x0a\xb3\xb9\x5e\xff\xcc\x8d\x4e\x8e\xfd\x7a\x64\xd6\xa1\x71\xce\x8d\x21\xc9\x6e\x4b\xe6\xae\xf6\x2f\x19\x54\xb4\x6a\x19\x71\x45\xb5\x67\x51\x38\xcc\xde\x3b\xd8\x01\x27\xc7\x98\x9c\x98\x87\x28\x4e\x0e\x43\x15\xf9\x88\xee\xc8\xa4\xfc\x8f\x2e\x51\x4c\x45\xac\x82\xbf\x47\x06\x21\xf1\x65\xe0\xf7\xff\x6c\x8f\x79\x14\xff\x27\x00\x00\xff\xff\xc8\xa5\xfc\x0c\x21\x21\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSingletonMysql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8e\xd3\x30\x10\xc7\xcf\xf6\x53\x0c\x91\x56\x8d\x25\x2b\xcb\x5e\x91\x7a\xd8\xa5\x65\x15\x28\xfd\x2e\x08\x21\x0e\x6e\x3d\x6e\x2d\xa5\x4e\xf1\x47\xa1\x42\x7d\x77\xe4\x24\x6d\xb3\x4b\x41\x1c\xf6\x92\x8c\x3d\x33\x7f\xcf\x6f\x66\x6e\x6f\x61\x19\x74\x21\x17\x3b\x87\xd6\x4f\x02\xda\xc3\xc7\xc3\x6c\x32\xa8\x6f\x1d\x08\x88\x07\xe7\x85\xc7\x2d\x1a\x0f\xce\x5b\x6d\xd6\x10\x5c\xfc\xfa\x0d\x42\xa8\x12\x7b\xc2\x0b\xd8\xd9\x72\xaf\x25\xca\x8c\xaa\x60\x56\xd7\x75\x53\xa9\x05\x48\xab\xf7\x68\x5d\xd6\xd3\xa2\xc0\x95\xe7\xe0\xc5\xb2\xc0\xa1\xd8\x62\xa3\xcf\x21\xec\xa4\xf0\xc8\xe1\xc7\x46\x7b\x2c\xb4\xf3\xf0\xf5\x5b\xed\x63\xa7\x1a\x7e\x51\x72\xf1\x76\xe3\xed\x56\x98\x75\x81\x59\x2e\xd1\xf8\x49\x28\x3d\xce\x0a\xbd\xc2\xf8\x64\x36\x98\x70\x88\xff\xe9\xa4\xa5\xc9\x28\xb9\xbc\x7c\x5d\xe1\x8f\xe4\x73\x02\xa3\x94\x2c\x83\x82\x37\xed\xc4\x47\xf4\x0f\x41\x29\xb4\x29\xa3\x44\xa2\x42\xdb\x72\x8e\xc3\xc9\xb9\x0c\x2a\xa6\xef\x85\x85\x55\x59\x84\xad\x71\x0d\x14\x25\x5a\x41\x81\x26\xbd\xd4\x08\xaf\xba\xf0\x3a\xc2\x92\x53\x68\xb7\x09\x76\xd9\xfb\x52\xb7\x42\x39\x24\x3c\x61\x94\x1c\xe9\x59\xa6\x6e\x23\x83\xee\x49\x43\x6d\x7d\xf6\x6e\x67\xb5\xf1\x2a\xa5\x84\x44\x02\x1e\xff\x49\x3e\x9c\xf5\xa7\x73\xc8\x1f\x87\xa3\x69\x1f\xf2\xe1\x7c\x04\x37\x0e\xd2\x1b\xc7\xe0\xd3\xfd\x60\xd1\x9f\x55\x76\x52\x05\x9f\x7b\x50\x9d\x9a\xb2\x2a\xbb\x05\x5b\x88\x15\x6e\xca\x42\xa2\x75\x55\x13\x17\x0e\x73\x23\xf1\x67\xdb\xc1\x9f\xb1\x72\xb8\xe3\x70\xc7\xa2\x14\xa3\x84\x58\xf4\xc1\x1a\x58\x06\x95\xcd\x2a\xe2\xb4\xa1\x7b\x46\xd1\x40\x9c\x19\xfe\x52\x3c\x8c\x86\xd0\x5b\x8c\x07\xf9\xdb\xfb\x79\x1f\x3e\xf4\xbf\xc0\x62\xdc\x8b\x66\x45\xf5\x04\xaa\xc5\xf4\x62\x48\x71\xe2\xaa\xb4\xa0\x39\xec\xe3\xd6\x58\x61\xd6\xd8\x2c\x7a\x35\x1b\xad\x40\x5f\xa6\x1d\xa9\xb2\xcf\x56\x7b\x7c\x38\x78\x4c\x3b\xbc\x13\x5b\x72\xa4\x84\x7c\x8f\x8b\x29\x9f\x2e\xde\x3f\x36\x76\xcf\x68\x4b\xac\x69\x64\xad\x71\xcd\x93\x40\xb7\x69\x5a\x9a\xfc\x67\x66\x5d\x20\xeb\x34\xd3\xb9\x36\xb6\x23\xfd\x1d\x00\x00\xff\xff\x4c\x0d\x4e\x35\x6a\x04\x00\x00")

func templatesSingletonMysql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMysql_upsertGoTpl,
		"templates/singleton/mysql_upsert.go.tpl",
	)
}

func templatesSingletonMysql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMysql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mysql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdc\x36\x16\x7e\x96\x7e\xc5\x89\x80\x74\xa5\x54\x66\x02\x14\xd8\x07\x07\x42\x10\x8f\xc7\x85\xd1\xc4\x97\x19\xef\x16\x8b\xba\x68\x69\x89\x63\x13\x96\x48\x99\xa4\x3c\x9e\x35\xfc\xdf\x17\x87\xd4\x85\x1a\x8f\xbc\xce\x6e\x1e\xfb\x94\x48\xfc\xce\xed\x3b\x47\x87\x9f\xe7\x9e\x2a\x50\xd7\x0f\x5f\x37\xcb\xf3\x2f\xb7\x6c\x03\x19\x28\x76\xcd\x1e\x6a\xf2\xb5\xd1\x66\x26\xab\x9a\x97\x2c\xfe\x33\xfe\x54\x25\x71\x9c\x5e\x8a\xe4\xd3\xa5\xfe\x71\x76\x7a\xb2\xbc\x58\x7c\x3e\x3e\xb9\x20\xef\x3e\x1d\x9d\x2e\xe6\xc7\x3f\x9f\xc0\x2f\xf3\x7f\x91\x77\x9f\x2e\x45\xf2\xe3\x9f\x49\x18\x9a\x4d\xcd\xa0\xda\xe8\xbb\xf2\x82\x69\xc3\x14\x68\xa3\x9a\xdc\xc0\x63\x18\x14\x57\x33\x29\x04\xbc\xd3\x77\x25\x39\x3c\x08\xf1\xc5\x09\xad\x18\x20\x84\x8b\xeb\x30\xb8\x91\xda\x00\x0c\xcf\x8d\x66\xca\x7f\xae\xa9\xd6\xfe\xb3\xd6\x65\x25\x0b\x36\x9c\x4b\x65\xed\xb9\x30\x61\x18\xc8\xda\x70\x29\x8e\x78\xd9\x03\xc2\xc0\x30\x6d\x0e\x0f\x6c\xd4\xde\xc9\x2d\xaf\x97\xe7\x5f\x66\x55\x01\x57\x52\x96\xe1\x53\x18\xae\x1a\x91\x03\x17\xdc\xc4\x89\xcb\xfb\x2b\xe5\x02\x32\xf8\xc1\xab\xeb\xf1\xa9\x47\xc6\x15\xbc\xf3\x4e\x12\xd0\xcc\x34\x75\x9c\x00\x53\x4a\x2a\xf4\x80\x5c\x33\xa5\xdc\x8b\x30\x0c\xee\x79\xcd\x14\x59\x32\x73\xc8\x56\xb4\x29\x4d\x1c\x59\x7b\xd2\x16\x14\xa5\x10\x19\xd5\xb0\x28\x99\x86\x62\xad\x51\x0a\x3f\xfd\xf4\xe1\xef\x49\x18\x06\x15\x69\xc9\xcc\xc0\x59\xfc\xcc\xcc\xd2\x56\xd8\x19\x14\x57\x82\x56\xd6\x65\x45\x2c\xd1\x93\x48\x3c\x75\x38\xdb\x80\x49\x1c\x9e\x3a\x9c\x6d\xcc\x24\x0e\x4f\x5b\x1c\x36\xc8\xc3\x1d\x8b\x71\x3d\x16\xd4\x75\x75\xd2\x5f\xc7\x92\x45\x7b\x1d\x9d\x34\x40\x8c\x5f\xbe\xd7\x72\xcf\xe6\x40\xca\xb2\x0f\x71\xcb\x6b\x7d\x57\xe6\x55\x11\x21\xbb\xd8\xbb\x0c\xee\x69\x49\xc9\x01\xbb\xe6\xe2\x9f\xb4\xe4\x05\xc5\xf1\x8a\x13\xd2\x3e\xb0\x38\x0c\x02\x0b\x71\xc1\x4f\xa4\x99\x57\xb5\xd9\xc4\x8e\xc6\x14\x46\xac\xa5\x93\x60\x64\xbf\x07\xbb\x56\xf4\xe0\x13\x69\x62\xfb\x9f\xf9\x5d\x43\x4b\x1d\x3b\x46\x53\xf8\xd0\x1b\x38\x1a\x5f\x70\xef\xc6\xa4\xc7\x77\xb4\x4c\x1b\xb4\x6c\xf7\x16\x3d\xfb\x69\x18\x24\x64\x76\xc3\xf2\xdb\x18\x39\xe2\x2b\x3b\xe2\x6f\x32\x10\xbc\xc4\xa1\x0f\x14\x33\x8d\x12\xf8\x36\x0c\x9e\xc2\x30\x78\xff\x1e\x66\x8a\x51\xc3\x80\x82\xa2\xa2\x90\x15\xff\x37\x2b\xa0\xb8\x02\xcc\x81\x58\x17\x25\x13\xb1\xdf\xd4\x04\xb2\x0c\x3e\x58\x77\x5b\xbd\xee\x3d\x90\xa5\xa1\x57\x25\x73\x07\x7d\x85\x89\x8b\xd9\x66\x95\x41\x45\x2a\x7a\xcb\x4e\xfb\x9d\x10\x27\x1f\xa7\xf3\x95\x4a\x93\x5f\x15\xad\x63\xa6\xb0\x71\xb9\x6c\xca\x42\xfc\xcd\x00\xba\x00\xb7\x57\x60\xc5\x4b\x3b\x4e\x6d\x94\x37\xa3\xb1\x42\x77\x5e\xe8\x42\xc9\xfa\xc2\x26\xbf\x23\xec\x88\xa7\xe0\x69\x6c\x99\x5b\xc2\x5e\x6d\x1b\x06\x41\xd1\x54\x35\xa6\xb0\x9f\x01\x7b\x60\x39\x99\xc9\xaa\xa2\xa2\x68\x27\x1b\x4f\xa3\x14\x53\x72\xeb\x44\x3b\x2e\x52\x88\xf6\xf6\x84\xdc\x2b\xa8\xa1\xee\xb8\x23\x31\x70\x19\x4c\x7b\x9c\xf2\x86\xae\xae\xa8\x66\xf6\xdc\x6b\x28\xe6\xa8\x52\x58\xa3\x3b\x2e\xc9\x19\xaf\x59\x9c\x0c\x79\x2f\x4d\x81\x35\xee\x67\xf0\xc3\xd5\xc6\x30\x4d\x0e\x9a\xd5\xca\xae\x5b\x2f\x95\x69\xd0\xe0\x88\x2c\x4d\x21\x1b\x5c\x37\xeb\xf1\x4b\x47\xed\x28\x5c\xe8\x3b\x47\x8c\x5d\xf7\x82\xad\x8f\x7e\x61\x9b\x43\xa6\x8d\x92\x1b\xa6\x62\xef\xba\x4c\x41\x25\xdb\x46\xce\xf1\x56\x92\xa1\xdf\xcf\x21\x0b\xaa\xcc\xcb\xed\xdc\x1a\xc1\x15\xe5\x25\x2b\xc0\x48\xd0\x68\x0b\x7d\x33\x21\x77\xdd\xc0\x51\x1c\x0f\x8f\x9f\xdb\x77\x09\xb7\x15\x6a\x57\x61\xbf\x52\xbe\x33\xd0\xaa\x32\xe4\x4c\x71\x61\x4a\x81\x11\x92\xed\x77\xa3\x6e\xb4\x3b\x28\x4e\x92\x57\xe6\xb8\xa6\xdc\xc0\x4a\xaa\x49\x56\xc2\x20\xf8\x03\x07\x81\xcc\x4a\xa9\x59\x9c\xc0\xfb\xf7\xf0\x79\x85\xea\xa4\xfb\x5a\xb8\x86\x42\x0a\x96\x42\x8e\x08\x30\x37\x0c\xd6\x8a\x1b\x06\x4c\x14\x20\x57\xf6\x45\xcd\x6b\x16\xee\x66\xf8\x7f\xad\x7b\x6b\x58\xfe\xcf\xca\xb7\x67\x01\x0b\x6f\x9d\x08\x5e\xbe\xa0\x57\x74\xf9\x55\x16\x2c\xf6\xc4\x54\xd2\xfe\x8b\x65\xe8\x35\x37\xf9\x0d\xd8\xd3\xc7\x30\xc8\xa9\x66\xad\x3e\xd9\x1f\xb6\x66\xb4\x98\x9f\xff\xe3\x78\x31\x3f\x8c\x3a\xc4\x8a\x96\x7a\x0c\x39\x3c\x5e\x7e\x3e\xf8\xe2\x41\xce\x16\xf3\xa3\xf9\x02\x8d\x7c\x58\x14\x06\xed\x3e\xf1\xde\x62\x74\xac\x68\xb2\x88\xf1\x0a\xf2\xd2\x6f\x1d\x20\xed\xcb\x1a\x79\x5f\xc5\xb8\x9e\x5a\xf8\x1e\xee\xf1\xec\xad\xb6\x6b\x6a\x90\x8c\xc9\x74\xa0\xed\x7b\x64\x90\x79\xa6\xaa\x53\x68\x17\x13\x97\x8d\xe1\x25\xb9\x60\x55\x6d\x61\x11\x8a\x3a\xe7\xbf\xbb\x39\x5e\xba\x31\x27\x3b\xee\x26\x66\xe7\x25\xa4\x2f\x66\x67\x18\xda\x12\x1f\x06\x7f\xa4\xed\x98\x4a\x8d\x1b\xc0\xb4\xda\xc2\x05\x96\x9a\x1c\x6b\xbc\xe5\x1f\xb8\x36\x76\x34\xdd\x9d\x65\x7d\x64\x80\xdd\x0d\x83\x27\x60\xa5\x66\xf0\x0d\x79\xda\x9b\x12\x84\x34\xb8\x37\x0c\x54\xbd\x96\xc4\x04\xb1\x03\x47\x75\x3b\xf9\x96\xab\xe8\xb7\xbc\xe4\x4c\x98\xdf\x11\x32\x1c\xaf\xda\x53\x34\xce\xde\xea\x4b\x61\x9b\xd3\x26\xff\x1c\x86\x9a\x27\x7b\x5b\xb4\x30\x7c\xda\x09\x43\xe1\x35\x78\xc3\xa7\xc4\x93\x1c\x28\x52\x13\xac\xd1\x89\x8d\x1d\x51\xa8\xd6\x6b\xa9\x8a\xc1\x85\x35\xc1\xd2\xd0\x8b\xfd\x3a\xf6\xf1\xca\xee\xbf\xa6\x4e\x2a\x25\x1f\xdd\xe9\x9b\x0c\xa2\x68\xc2\xbb\xd6\xe5\x1e\x82\x7a\xef\x68\xd7\xf9\x76\x5d\x19\x1b\xf6\x14\xd6\x4a\x1a\x99\xcb\x32\x33\x79\xfd\x12\xd3\xfd\x6e\xfc\x8b\xec\xef\x4b\xb6\xbf\x36\xf0\xd3\xa9\x6a\x62\x95\x68\x32\x6c\x5f\x7c\xd7\x5e\x3d\xd3\x7b\x65\x2c\xf5\x86\xad\x82\x8b\x1d\xbf\x6a\x7f\x7f\xb5\x5b\xa0\xd3\x58\xf0\x56\x7f\x7c\xa6\xb3\xfa\xcd\x49\x54\x23\x66\x55\x11\xeb\xbb\xb2\x53\xf1\xd1\x0b\x79\xf8\x62\xf5\xe5\x2c\x10\x39\xe4\x80\x6b\x02\xb7\x89\xfe\xae\xd9\x18\x46\x55\x21\xd7\xc2\xcf\x05\x27\x80\xb4\xbf\x26\x3c\xdf\x4a\xdd\x51\xcf\xf8\x7f\x95\xe8\xfb\xdf\xae\xd1\xbd\xab\x55\x6a\xb2\x60\x95\xbc\xc7\x21\x7c\xd5\x05\xd2\x11\x80\x32\x33\xed\xee\xec\xf6\xc2\x4a\x81\xaa\x6b\x0d\x84\x90\xee\x1e\xee\xab\xb6\x07\x19\xd0\xba\x66\xa2\x88\x7f\xfb\xdd\x01\x1e\xb7\xc5\xf7\x93\x73\x41\x08\xc1\x01\xcc\x77\xe8\xf6\x36\xa2\x87\x43\x58\x2f\x7b\x9d\x5f\x4d\x4e\xd8\x7a\xc1\x68\xc1\x94\xcb\x14\xbd\x69\x27\xa9\x77\x89\x73\x3d\xad\xdb\x73\x5f\x8c\x3b\x17\xfd\x4b\x77\x43\x39\xe3\xd0\xeb\x07\x1e\x2f\x1a\xf1\xbc\x15\xbe\x7a\xea\xae\x45\xd5\x08\xc1\xc5\xf5\x7e\xd4\xb3\xe9\x6a\x4b\xc6\x70\x17\xda\xd7\x58\x5b\xa7\x5b\x0a\x6c\xfb\xef\xd7\xd7\x48\xa9\x5c\x0a\x1c\xd5\xb8\xfd\x91\x2b\x75\xed\x4b\xa6\xa7\x76\x6b\x68\x53\xeb\xde\x86\x1b\xff\x68\x14\x0c\x88\x96\xb3\xbb\x92\x9c\xd6\x4c\x0c\x7f\x86\x15\x8a\xdf\x33\x45\xec\x9f\x28\x07\x0d\x2f\x8b\xf3\x86\xa9\x4d\x5b\x50\xf7\x2b\x84\xdb\xa4\xe3\xaf\xb3\x5b\xf8\xdd\x46\x4f\x61\x58\xa7\xbb\x74\xca\x40\x44\xfa\x8c\x9d\x71\x21\x4f\xe1\x7f\x02\x00\x00\xff\xff\x2f\xbf\x35\x64\x67\x14\x00\x00")

func templates_testSingletonMysql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_main_testGoTpl,
		"templates_test/singleton/mysql_main_test.go.tpl",
	)
}

func templates_testSingletonMysql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testSingletonMysql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMysql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMysql_suites_testGoTpl,
		"templates_test/singleton/mysql_suites_test.go.tpl",
	)
}

func templates_testSingletonMysql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMysql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mysql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\xd8\x5d\x50\x0b\x85\xd9\x5e\x53\xf8\xe0\x7c\x1c\x82\xb6\x86\x1b\xcb\xe7\x82\x91\x46\x0e\x61\x9a\x54\xc9\x51\x6d\x57\xe0\x7f\x2f\x28\xd9\x8e\x13\x3b\x6d\x0e\xed\x21\x07\x7f\x70\xf0\x66\xde\x7b\x33\x1c\xb6\xed\x19\xfc\x2d\xb5\x92\x1e\x2e\x86\x20\x46\xf1\x1f\x7a\x91\xcb\x7b\x8d\xd0\xff\x88\xb1\x5c\x62\x08\xac\x6a\x4c\x01\x84\x9e\xda\xb6\xcf\x10\xb3\x7a\xa2\x1b\x27\x75\x08\xb3\xda\xa3\x23\x4e\xf0\x5f\x04\x28\x33\x17\x79\x0a\x2d\x4b\x48\x4c\xa4\x93\x5a\xa3\xe6\x29\x63\x89\xaa\x40\xa3\xe1\xfb\x02\xd7\x76\x65\xa6\xca\xcc\x1b\x2d\x5d\x08\x23\xad\xaf\xac\x6e\x96\xc6\xa7\x30\x1c\xfe\x0c\x39\x71\x6a\x29\xdd\xe6\x03\x6e\xf6\x09\x2d\x4b\x12\x12\xd3\x85\xaa\xf9\x20\x7e\xd7\xca\xcc\x81\x3a\x1b\x2b\x45\x0f\x60\x8d\xde\x40\xdd\xe7\xc1\x02\x37\x50\xf4\x99\x83\x94\x25\x61\xaf\x6c\xb9\x99\x7e\xfe\x78\xe0\xef\x91\x72\x66\xd4\xd7\x06\x0f\xf5\xfd\xff\x4b\x4e\x63\xa1\xe9\xd2\x76\x64\x40\x16\x0a\x6b\x2a\xad\x0a\x02\x6b\x7a\x6e\x96\x78\xc4\x32\xb6\xdf\x49\x53\xda\xa5\xfa\x8e\x62\x8c\xab\x29\x62\xc9\x53\x96\x7c\x93\x0e\xd0\x75\x1f\xeb\x58\x72\x7e\x0e\x23\x22\x5c\xd6\x04\xf4\x80\x70\x3b\x9e\xde\xdc\xe5\xe0\x55\x89\x60\x2b\x90\x06\x66\x93\x18\x61\x89\x8d\x15\x4f\x5a\x69\x7b\xbf\xb1\xe8\x21\xe7\x94\x5c\x53\x10\x8f\x62\x32\xf8\xd7\x66\xf0\x42\xf3\xaf\x2f\xf3\x4d\x8d\x3e\x83\x4a\x6a\x8f\xe9\xfb\xae\xd0\x5f\x43\x30\x4a\x6f\x3b\x72\x13\xa5\x56\x7c\x30\x33\x5d\x2f\xc8\x3e\xb2\x9c\x56\x04\xbe\xe3\xbe\x80\x7f\xfc\x20\x8b\xf5\xb6\x8d\x69\x5b\x55\x81\xb1\x04\x62\x6c\xaf\xac\x21\x5c\x53\x08\x05\xad\xa3\xb5\xa2\x3f\x8b\x4b\x59\x2c\xe6\xce\x36\xa6\xe4\x69\xdb\xa2\x29\x43\x60\x49\x0f\xf9\xd4\x78\xca\xd7\xbc\xab\x72\x58\xe1\x28\x70\x6f\x95\x16\x97\x38\x57\xa6\xab\xa1\x3d\x1e\xc6\xf2\x35\x2f\x68\x9d\x45\x83\x3b\x86\x57\x81\x52\x96\x94\x58\xa1\x83\xb8\x39\x3c\x85\x16\xbe\xc0\x10\x68\x2d\xee\xac\xd6\xf7\xb2\x58\xf0\x14\x42\x1c\xf1\x7e\x18\x56\x6c\x17\xe9\x25\xe3\x71\x28\x68\x4a\x38\x0b\x01\xe2\xa9\xe3\xbf\x35\x15\x3a\x9e\x3e\x3d\xbd\x6e\x2e\x4d\x47\x77\x7a\x28\x47\xd3\x28\x6c\x63\xa8\x0b\x3c\xbb\x5a\xbb\x57\x80\xa7\xe2\x2a\x62\x5e\x29\xff\xd1\xf9\xb1\x4a\xbe\xa3\x8d\x90\x8e\x38\x82\xde\x3d\x81\x0c\x56\xd2\xc4\x35\x42\x70\x58\x58\x57\x66\x30\xb7\x74\x31\xc8\x7a\xfc\x56\xf4\xb3\x7d\x99\x4d\xae\x47\xf9\xcd\xa9\x7d\xf9\x6d\x1b\xf1\x22\xec\xe8\xd5\x12\x42\xfc\xd1\xf5\x79\x7b\xf7\xea\x8d\x5c\xab\xc0\x7e\x04\x00\x00\xff\xff\x63\xfd\x7b\x9f\x38\x07\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mysql_upsert.go.tpl":           templatesSingletonMysql_upsertGoTpl,
	"templates_test/singleton/mysql_main_test.go.tpl":   templates_testSingletonMysql_main_testGoTpl,
	"templates_test/singleton/mysql_suites_test.go.tpl": templates_testSingletonMysql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_upsert.go.tpl": &bintree{templatesSingletonMysql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"mysql_main_test.go.tpl":   &bintree{templates_testSingletonMysql_main_testGoTpl, map[string]*bintree{}},
			"mysql_suites_test.go.tpl": &bintree{templates_testSingletonMysql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
